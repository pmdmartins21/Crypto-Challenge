{"version":3,"sources":["shared/components/Tables.jsx","shared/components/Endpoints.jsx","shared/components/About.jsx","App.js","reportWebVitals.js","index.js"],"names":["Row","record","keys","Object","map","key","noun","Tables","data","className","Endpoints","action","ursl","businessOperation","test","to","About","App","path","element","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9967068.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Tables/Tables.css'\r\n\r\nconst Row = ({ record })=>{\r\n  const keys = Object.keys(record)\r\n  return(\r\n    <tr key={record.noun}>\r\n      {\r\n        keys.map( key => <td key={key}>{record[key]}</td>)\r\n      }\r\n    </tr>\r\n  )\r\n}\r\nconst Tables = ({ data }) => {\r\n  const keys = Object.keys(data[0])\r\n  return (  \r\n    <table className='tableContainer'>\r\n        <thead  className='TableTittle tableContainer'>\r\n            <tr>\r\n              {\r\n                keys.map(key => <th key={key}>{key}</th>)\r\n              }\r\n            </tr>\r\n        </thead>\r\n        <tbody className='textcolor tableContainer'>\r\n            {\r\n                data.map(record => <Row record={record} />)\r\n            }\r\n        </tbody>\r\n\r\n    </table>\r\n  );\r\n}\r\n \r\nexport default Tables;","import React from 'react';\r\nimport Tables from './Tables';\r\nimport { Link } from \"react-router-dom\";\r\nimport '../style/Endpoints.css';\r\nimport './Tables/Table';\r\n\r\nfunction Endpoints ()  {\r\n const data = [\r\n      { noun: 'Users' , action: 'Get', ursl: '/Users', businessOperation: 'Get All Users' , test: '‘test(\\'Test #1 - Listar os utilizadores\\', () => {\\r\\n  return request(app).get(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body).not.toHaveLength(0);\\r\\n      expect(res.body[0]).toHaveProperty(\\'firstName\\');\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Users' , action: 'POST', ursl: '/Users/', businessOperation: 'InsertNewUser' , test: '‘ test(\\'Test #2 - Inserir utilizadores\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n  .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({ firstName: \\'Jo\\u00E3o\\', lastName: \\'Manuel\\', username: `${Date.now()}`, \\r\\n            email: `${Date.now()}@gmail.com`, password: \\'12345\\' })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.firstName).toBe(\\'Jo\\u00E3o\\');\\r\\n      expect(res.body).not.toHaveProperty(\\'password\\');\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Users' , action: 'POST', ursl: '/Users/', businessOperation: 'InsertNewUser' , test:'‘ test(\\'Test #2.1 - Guardar a palavra passe encriptada\\', async () => {\\r\\n  const res = await request(app).post(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({ firstName: \\'Jo\\u00E3o\\', lastName: \\'Manuel\\', username: `${Date.now()}`, \\r\\n            email: `${Date.now()}@gmail.com`, password: \\'12345\\' })\\r\\n  expect(res.status).toBe(201);\\r\\n\\r\\n  const { id } = res.body;\\r\\n  const userDB = await app.services.user.findOne({ id });\\r\\n  expect(userDB.password).not.toBeUndefined();\\r\\n  expect(userDB.password).not.toBe(\\'12345\\');\\r\\n});’' },\r\n      { noun: 'Users' , action: 'POST', ursl: '/Users/', businessOperation: 'InsertNewUser' , test: '‘describe(\\' Test 2.2 - Valida\\u00E7\\u00E3o de criar um user\\', () => {\\r\\n  const testTemplate = (newData, errorMessage) => {\\r\\n    return request(app).post(MAIN_ROUTE)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({\\r\\n        firstName: \\'Jo\\u00E3o\\', lastName: \\'Manuel\\', username: `${Date.now()}`, \\r\\n            email: `${Date.now()}@gmail.com`, password: \\'12345\\', ...newData,\\r\\n      })\\r\\n      .then((res) => {\\r\\n        expect(res.status).toBe(400);\\r\\n        expect(res.body.error).toBe(errorMessage);\\r\\n      });\\r\\n  };\\r\\n\\r\\n  test(\\'Test 2.2.1 - Sem First Name\\', () => testTemplate({ firstName: null }, \\'O First Name \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 2.2.2 - Sem Last Name\\', () => testTemplate({ lastName: null }, \\'O Last Name \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 2.2.3 - Sem Email\\', () => testTemplate({ email: null }, \\'O EMAIL \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 2.2.4 - Sem Username\\', () => testTemplate({ username: null }, \\'O USERNAME \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 2.2.5 - Sem Password\\', () => testTemplate({ password: null }, \\'A Password \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n});’' },\r\n      { noun: 'Users' , action: 'GET', ursl: '/Users/:id', businessOperation: 'GetSpecificUser' , test: '‘ test(\\'Teste #3 - Listar um user por id\\', () => {\\r\\n  return app.db(\\'users\\')\\r\\n    .insert({ firstName: \\'Jo\\u00E3o\\', lastName: \\'Manuel\\', username: `${Date.now()}`, \\r\\n    email: `${Date.now()}@gmail.com`, password: \\'12345\\' }, [\\'id\\'])\\r\\n    .then((user) => request(app).get(`${MAIN_ROUTE}\\/${user[0].id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body[0].firstName).toBe(\\'Jo\\u00E3o\\');\\r\\n      expect(res.body[0]).not.toHaveProperty(\\'password\\');\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Users' , action: 'DELETE', ursl: '/Users/:id', businessOperation: 'DeleteAccount' , test: '‘test(\\'Test #4 - Eliminar User\\', () => {\\r\\n  return app.db(\\'user\\')\\r\\n    .insert({ firstName: \\'Z\\u00E9\\', lastName: \\'Manuel\\', username: `${Date.now()}@gmail.com`, \\r\\n    email: `${Date.now()}@gmail.com`, password: \\'12345\\'}, [\\'id\\'])\\r\\n    .then((user) => request(app).delete(`${MAIN_ROUTE}\\/${user[0].id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(204);\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Users' , action: 'PUT', ursl: '/Users/:id', businessOperation: 'Update' , test: '‘ test(\\'Test #5 - Alterar info de utilizador por Id\\', async () => {\\r\\n  return app.db(MAIN_ROUTE)\\r\\n    .insert({ firstName: \\'OldName\\', lastName: \\'Manuel\\', username: `${Date.now()}`, \\r\\n    email: `${Date.now()}@gmail.com`, password: \\'12345\\'}, [\\'id\\'])\\r\\n    .then((acc) => request(app).put(`${MAIN_ROUTE}\\/${acc[0].id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({ firstName: \\'NewName\\' }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body.firstName).toBe(\\'NewName\\');\\r\\n    });\\r\\n});’'},\r\n     \r\n      { noun: 'Crypto' , action: 'GET', ursl: '/Crypto', businessOperation: 'GetAllCryptos' , test: '‘ test(\\'Test #7 - Inserir crypto\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({\\r\\n      name: name,\\r\\n    })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.name).toBe(name);\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Test #7.1 - Inserir nome de Crypto duplicado\\', () => {\\r\\n  return app.db(\\'cryptos\\')\\r\\n    .insert({ name: \\'Crypto Dup\\' })\\r\\n    .then(() => request(app).post(MAIN_ROUTE)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({ name: \\'Crypto Dup\\' }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(400);\\r\\n      expect(res.body.error).toBe(\\'Name duplicado na Bd\\');\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Crypto' , action: 'POST', ursl: '/Crypto/;<cryptoData>', businessOperation: 'Create new Crypto' , test: '‘ test(\\'Test #7 - Inserir crypto\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({\\r\\n      name: name,\\r\\n    })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.name).toBe(name);\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Test #7.1 - Inserir nome de Crypto duplicado\\', () => {\\r\\n  return app.db(\\'cryptos\\')\\r\\n    .insert({ name: \\'Crypto Dup\\' })\\r\\n    .then(() => request(app).post(MAIN_ROUTE)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({ name: \\'Crypto Dup\\' }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(400);\\r\\n      expect(res.body.error).toBe(\\'Name duplicado na Bd\\');\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Crypto' , action: 'PUT', ursl: '/Cryptos/:id/', businessOperation: 'UpdateCryptoData' , test: '‘ test(\\'Test #7 - Inserir crypto\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({\\r\\n      name: name,\\r\\n    })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.name).toBe(name);\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Test #7.1 - Inserir nome de Crypto duplicado\\', () => {\\r\\n  return app.db(\\'cryptos\\')\\r\\n    .insert({ name: \\'Crypto Dup\\' })\\r\\n    .then(() => request(app).post(MAIN_ROUTE)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({ name: \\'Crypto Dup\\' }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(400);\\r\\n      expect(res.body.error).toBe(\\'Name duplicado na Bd\\');\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Crypto' , action: 'DELETE', ursl: '/Cryptos/:id/', businessOperation: 'RemoveCrypto' , test: '‘ test(\\'Test #8 - Alterar Crypto por ID\\', () => {\\r\\n  return app.db(\\'cryptos\\')\\r\\n    .insert({ name: \\'Crypto - Update\\'}, [\\'id\\'])\\r\\n    .then((crypto) => request(app).put(`${MAIN_ROUTE}\\/${crypto[0].id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({ name: \\'Crypto Updated\\' }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body.name).toBe(\\'Crypto Updated\\');\\r\\n    });\\r\\n});’'},\r\n     \r\n      { noun: 'User' , action: 'POST', ursl: '/auth/signin', businessOperation: 'Login' , test: '‘ test(\\'Teste #11.1 - Receber token ao autenticar\\', () => {\\r\\n  return app.services.user.save(\\r\\n    { firstName: \\'Pedro\\', lastName: \\'Auth\\', email: email, username: username, password: \\'12345\\' },\\r\\n  ).then(() => request(app).post(\\'\\/auth\\/signin\\')\\r\\n    .send({ username: username, password: \\'12345\\' }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body).toHaveProperty(\\'token\\');\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Teste #11.2 - Tentativa de autentica\\u00E7ao errada\\', () => {\\r\\n  const wrongUsername = `${Date.now()}`;\\r\\n  return app.services.user.save(\\r\\n    { firstName: \\'Pedro\\', lastName: \\'Auth\\', email: `${Date.now()}@ipca.pt`, username: wrongUsername, password: \\'12345\\' },\\r\\n    ).then(() => request(app).post(\\'\\/auth\\/signin\\')\\r\\n    .send({ username: wrongUsername, password: \\'67890\\' }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(400);\\r\\n      expect(res.body.error).toBe(\\'Autentica\\u00E7\\u00E3o Inv\\u00E1lida!\\');\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Teste #11.3 - Tentativa de autentica\\u00E7ao com utilizador errado\\', () => {\\r\\n  const invalidUsername = `${Date.now()}`;\\r\\n  return request(app).post(\\'\\/auth\\/signin\\')\\r\\n    .send({ username: invalidUsername, password: \\'67890\\' })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(400);\\r\\n      expect(res.body.error).toBe(\\'Autentica\\u00E7\\u00E3o Inv\\u00E1lida! #2\\');\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Teste #11.4 - Aceder a rotas protegidas\\', () => {\\r\\n  return request(app).get(\\'\\/v1\\/users\\')\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(401);\\r\\n    });\\r\\n}); ’'},\r\n      { noun: 'User' , action: 'POST', ursl: '/auth/signup', businessOperation: 'LogOut' , test: '‘ test(\\'Teste #12 - Criar utilizador\\', () => {\\r\\n  const newUsername = `${Date.now()}`;\\r\\n  return request(app).post(\\'\\/auth\\/signup\\')\\r\\n    .send({ firstName: \\'Pedro\\', lastName: \\'Signup\\', email: `${Date.now()}@ipca.pt`, username: newUsername, password: \\'12345\\' })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.firstName).toBe(\\'Pedro\\');\\r\\n      expect(res.body.lastName).toBe(\\'Signup\\');\\r\\n      expect(res.body).toHaveProperty(\\'email\\');\\r\\n      expect(res.body).not.toHaveProperty(\\'password\\');\\r\\n  });\\r\\n});’'},\r\n     \r\n      { noun: 'Games' , action: 'POST', ursl: '/games', businessOperation: 'CreateNewGame' , test: '‘test(\\'Teste #13 - Criar um novo jogo\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({\\r\\n      startDate: startDate, endDate: Date.now()\\r\\n    })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.startDate).toBe(startDate);\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Games' , action: 'GET', ursl: '/games/:id', businessOperation: 'GetSpecificGame' , test: '‘ test(\\'Teste #14 - Listar um jogo por id\\', () => {\\r\\n  return app.db(\\'games\\')\\r\\n    .insert({ startDate: startDate, endDate: Date.now()}, [\\'id\\'])\\r\\n    .then((game) => request(app).get(`${MAIN_ROUTE}\\/${game[0].id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body.startDate).toBe(startDate);\\r\\n      expect(res.body).toHaveLength(1);\\r\\n    });\\r\\n});’'},\r\n      { noun: 'Games' , action: 'PUT', ursl: '/games/:id/timer', businessOperation: 'StartTimer' , test: '‘ test(\\'Teste #15 - definir o inicio-fim do jogo\\', () => {\\r\\n  const newStartDate = Date.now();\\r\\n  const newEndDate = Date.now();\\r\\n\\r\\n  return app.db(\\'games\\')\\r\\n    .insert({ startDate: startDate, endDate: Date.now()}, [\\'id\\'])\\r\\n    .then((game) => request(app).put(`${MAIN_ROUTE}\\/${game[0].id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({ startDate: newStartDate, endDate: newEndDate }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body.startDate).toBe(newStartDate);\\r\\n      expect(res.body.endDate).toBe(newEndDate);\\r\\n      expect(res.body).toHaveLength(1);\\r\\n    });\\r\\n});’'},\r\n     \r\n      { noun: 'LeaderBoard' , action: 'GET', ursl: '/LeaderBoards/:gameId', businessOperation: 'CalculateLeaderBoardForSpecificGame' , test: '‘ test(\\'Teste #15 - definir o inicio-fim do jogo\\', () => {\\r\\n  const newStartDate = Date.now();\\r\\n  const newEndDate = Date.now();\\r\\n\\r\\n  return app.db(\\'games\\')\\r\\n    .insert({ startDate: startDate, endDate: Date.now()}, [\\'id\\'])\\r\\n    .then((game) => request(app).put(`${MAIN_ROUTE}\\/${game[0].id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n      .send({ startDate: newStartDate, endDate: newEndDate }))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body.startDate).toBe(newStartDate);\\r\\n      expect(res.body.endDate).toBe(newEndDate);\\r\\n      expect(res.body).toHaveLength(1);\\r\\n    });\\r\\n});’'},\r\n     \r\n      { noun: 'Wallet' , action: 'GET', ursl: '/GameWallet/:gameiD/:userId', businessOperation: 'GetuserSpecificGameWallet' , test: 'test(\\'Test #17.1 - Obter a gameWallet de um utilizador\\', () => {\\r\\n  return request(app).get(`${MAIN_ROUTE}\\/${testGame.id}\\/${user.id}`)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body).not.toHaveLength(0);\\r\\n      expect(res.body[0]).toHaveProperty(\\'crypto_id\\');\\r\\n      expect(res.body[0].amount).tobe(5);\\r\\n      expect(res.body[0].games_users_id).tobe(testGameUser.id);\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Test #17.2 - Obter as coins de outros utilizadores\\', () => {\\r\\n  return app.db(\\'\\/v1\\/users\\')\\r\\n    .insert({ firstName: \\'Account\\', lastName: \\'Invalid\\', email: `${Date.now()}@ipca.pt`, username: `${Date.now()}`, password: \\'12345\\'}, [\\'id\\'])\\r\\n    .then((newUser) => request(app).get(`${MAIN_ROUTE}\\/${testGame.id}\\/${newUser.id}`)\\r\\n      .set(\\'authorization\\', `bearer ${user.token}`))\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(403);\\r\\n      expect(res.body.error).toBe(\\'N\\u00E3o tem acesso ao recurso solicitado\\');\\r\\n    });\\r\\n});\\r\\n\\r\\ntest(\\'Teste #17.3 - Tentar um transa\\u00E7ao de venda sem possuir a cripto em carteira, ou em quantidade suficiente\\',  () => {\\r\\n  return app.db(\\'gameWallet\\').insert(\\r\\n    { games_users_id: testGameAUserA, crypto_id: testCrypto.id, amount: 1 }, [\\'id\\'],\\r\\n  ).then((gamewallet) => request(app).put(`${MAIN_ROUTE}\\/${gamewallet[0].id}`)\\r\\n    .set(\\'authorization\\', `bearer ${userA.token}`)\\r\\n    .send({ amount: -5 })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body.desc).toBe(\\'Trans Updated\\');\\r\\n    }));\\r\\n  \\r\\n  const res = await app.services.gameWallet.save({ games_users_id: testGameAUserA, crypto_id: testCrypto.id, amount: 1});\\r\\n  testGameAUserC = { ...res3[0] };\\r\\n\\r\\n  return request(app).put(MAIN_ROUTE)\\r\\n  .set(\\'authorization\\', `bearer ${userC.token}`)\\r\\n  .send({\\r\\n    games_users_id: testGameAUserA, crypto_id: testCrypto.id, amount: 1 \\r\\n  })\\r\\n  .then((res) => {\\r\\n    expect(res.status).toBe(401);\\r\\n    expect(res.body.error).toBe(\\'N\\u00E3o tem saldo suficiente para a transa\\u00E7\\u00E3o\\');\\r\\n  });\\r\\n});’'},\r\n     \r\n      { noun: 'Trasaction' , action: 'PUT', ursl: '/GameUser/<gameid, userId>', businessOperation: 'TryPurchaseWithNoCash' , test: 'test(\\'Teste #18 - Tentar uma transa\\u00E7ao de compra sem saldo suficiente\\', async () => {\\r\\n  return app.db(\\'games_users\\').insert(\\r\\n    {users_id: user.id, game_id: testGame.id, cashBalance: 0 }, [\\'id\\'],\\r\\n    ).then((game_user) => request(app).put(`${MAIN_ROUTE}\\/${game_user[0].id}`)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({ cost: cryptoCost })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(401);\\r\\n      expect(res.body.error).toBe(\\'N\\u00E3o tem saldo suficiente para a transa\\u00E7\\u00E3o\\');\\r\\n    }));\\r\\n});'},\r\n      { noun: 'Trasaction' , action: 'GET', ursl: '/GameUser/<gameid, userId>', businessOperation: 'GetUserTransactionHistory' , test: '‘ test(\\'Teste #19.1 - Listar todas as transa\\u00E7oes de utilizador\\', () => {\\r\\n  return app.db(\\'transactions\\').insert([\\r\\n    { games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'B\\', amount: 5, crypto_value: 100 },\\r\\n    { games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'S\\', amount: -2, crypto_value: 100 },\\r\\n    { games_users_id: testGameAUserB.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'S\\', amount: -5, crypto_value: 100 },\\r\\n  ]).then(() => request(app).get(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${userA.token}`)\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body).toHaveLength(2);\\r\\n      expect(res.body[0].desc).toBe(\\'B\\');\\r\\n      expect(res.body[0].amount).toBe(5);\\r\\n    }));\\r\\n});\\r\\n\\r\\ntest(\\'Teste #19.2 - Aceder a transa\\u00E7oes de outro utilizador\\', () => {\\r\\n  return app.db(\\'transactions\\').insert(\\r\\n    { games_users_id: testGameAUserB.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'B\\', amount: 5, crypto_value: 100 }, [\\'id\\'],\\r\\n  ).then((trans) => request(app).get(`${MAIN_ROUTE}\\/${trans[0].id}`)\\r\\n    .set(\\'authorization\\', `bearer ${userA.token}`)\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(403);\\r\\n      expect(res.body.error).toBe(\\'N\\u00E3o tem acesso ao recurso solicitado\\');\\r\\n    }));\\r\\n});’'},\r\n      { noun: 'Trasaction' , action: 'POST', ursl: '/GameUser/<gameid, userId>', businessOperation: 'AddNewGameTransaction' , test: '‘ test(\\'Teste #20.1 - Inserir Transa\\u00E7\\u00E3o de um utilizador\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${user.token}`)\\r\\n    .send({\\r\\n      games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'B\\', amount: 5, crypto_value: 100 \\r\\n    })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.games_users_id).toBe(testGameAUserA.id);\\r\\n      expect(res.body.type).toBe(\\'B\\');\\r\\n    });\\r\\n});\\r\\n\\r\\n\\r\\n\\r\\ntest(\\'Teste #20.2 - Transa\\u00E7oes de compra devem ser positivas\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n  .set(\\'authorization\\', `bearer ${userA.token}`)\\r\\n  .send({\\r\\n    games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'B\\', amount: 5, crypto_value: 100\\r\\n  })\\r\\n  .then((res) => {\\r\\n    expect(res.status).toBe(201);\\r\\n    expect(res.body.games_users_id).toBe(testGameAUserA.id);\\r\\n    expect(res.body.amount).toBe(\\'5.00\\');\\r\\n  });\\r\\n});\\r\\ntest'},\r\n      { noun: 'Trasaction' , action: 'POST', ursl: '/GameUser/<gameid, userId>', businessOperation: 'AddNewGameTransaction' , test: 'ntest(\\'Teste #20.3 -Transa\\u00E7oes de venda devem ser negativas\\', () => {\\r\\n  return request(app).post(MAIN_ROUTE)\\r\\n    .set(\\'authorization\\', `bearer ${userA.token}`)\\r\\n    .send({\\r\\n      games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'S\\', amount: -2, crypto_value: 100\\r\\n    })\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(201);\\r\\n      expect(res.body.games_users_id).toBe(testGameAUserA.id);\\r\\n      expect(res.body.amount).toBe(\\'-2.00\\');\\r\\n    });\\r\\n});\\r\\n\\r\\n\\/\\/validar todos os campos\\r\\ndescribe(\\' 20.4 Valida\\u00E7\\u00E3o de criar uma transa\\u00E7\\u00E3o\\', () => {\\r\\n  const testTemplate = (newData, errorMessage) => {\\r\\n    return request(app).post(MAIN_ROUTE)\\r\\n      .set(\\'authorization\\', `bearer ${userA.token}`)\\r\\n      .send({\\r\\n        games_users_id: testGameAUserC.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'B\\', amount: 5, crypto_value: 100, ...newData,\\r\\n      })\\r\\n      .then((res) => {\\r\\n        expect(res.status).toBe(400);\\r\\n        expect(res.body.error).toBe(errorMessage);\\r\\n      });\\r\\n  };\\r\\n\\r\\n'},\r\n      { noun: 'Trasaction' , action: 'POST', ursl: '/GameUser/<gameid, userId>', businessOperation: 'AddNewGameTransaction' , test: 'test(\\'Test 20.4.1 - Sem Game_User_ID\\', () => testTemplate({ games_users_id: null }, \\'O GAME_USER \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 20.4.2 - Sem Crypto_ID\\', () => testTemplate({ crypto_id: null }, \\'O Crypto_ID \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 20.4.3 - Sem Data\\', () => testTemplate({ date: null }, \\'A DATA \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 20.4.4 - Sem Tipo\\', () => testTemplate({ type: null }, \\'O TIPO \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 20.4.5 - Com Tipo errado\\', () => testTemplate({ type: \\'P\\' }, \\'O TIPO tem um valor inv\\u00E1lido\\'));\\r\\n '},\r\n      { noun: 'Trasaction' , action: 'POST', ursl: '/GameUser/<gameid, userId>', businessOperation: 'AddNewGameTransaction' , test: 'test(\\'Test 20.4.6 - Sem Amount\\', () => testTemplate({ amount: null }, \\'O AMOUNT \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n  test(\\'Test 20.4.7 - Sem o valor da crypto\\', () => testTemplate({ crypto_value: null }, \\'O VALOR DA CRYPTO \\u00E9 um atributo obrigat\\u00F3rio\\'));\\r\\n}); ‘'},\r\n      { noun: 'Trasaction' , action: 'GET', ursl: '/Transactions/:game/:userId/:transId', businessOperation: 'GetSpecificTransaciton' , test: '‘ test(\\'Teste #21 - Listar uma transa\\u00E7ao\\', () => {\\r\\n  return app.db(\\'transactions\\').insert(\\r\\n    { games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: \\'B\\', amount: 5, crypto_value: 100 }, [\\'id\\'],\\r\\n  ).then((trans) => request(app).get(`${MAIN_ROUTE}\\/${trans[0].id}`)\\r\\n    .set(\\'authorization\\', `bearer ${userA.token}`)\\r\\n    .then((res) => {\\r\\n      expect(res.status).toBe(200);\\r\\n      expect(res.body.id).toBe(trans[0].id);\\r\\n      expect(res.body.games_users_id).toBe(testGameAUserA.id);\\r\\n    }));\\r\\n});’'},\r\n      \r\n     \r\n     \r\n     ]\r\n     return ( \r\n    <>\r\n        <Tables data={data}/>\r\n\r\n        <Link to=\"/About\" className=\"AboutButton\">About</Link>\r\n    </>\r\n   );\r\n}\r\n \r\nexport default Endpoints;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport '../style/About.css'\r\nimport Endpoints from './Endpoints';\r\n\r\nconst About = () => {\r\n    \r\n  return ( \r\n  <>  \r\n   <div className=\"AboutContent\">\r\n     <h1 className=\"AboutTitle\">Cenários Propostos:</h1>\r\n      <h6 className=\"AboutText\">•\tCriação de um Website contendo um jogo relacionado com Crypto moedas;</h6>\r\n      <h6 className=\"AboutText\">•\tDesenvolver o Front-End e Backend e efetuar o deploy num servidor para ficar hosted na Web;</h6>\r\n      <h6 className=\"AboutText\">•\tObtenção de data-series de um período aleatório (1 mês de valores) de uma Base de Dados dedicada a crypto moedas para garantir um jogo justo.</h6>\r\n   </div>\r\n\r\n   <div className=\"AboutContent\">\r\n   <h1 className=\"AboutTitle\">Objetivos do Jogo</h1>\r\n    <h6 className=\"AboutText\" > •\tCriação de um grupo de jogadores para competir entre si;</h6>\r\n    <h6 className=\"AboutText\" >•\tAtribuição de uma carteira inicial com fundos virtuais para transações;</h6>\r\n    <h6 className=\"AboutText\" >•\tSimular um período temporal com as respetivas oscilações dos preços das moedas, sendo esse período uma proxy de um período de 1 mês real comprimido em apenas 3 a 5 minutos de jogo, permitindo a compra e venda das moedas em qualquer momento do jogo;</h6>\r\n    <h6 className=\"AboutText\" >•\tCalcular o valor final da carteira dos jogadores, dando um ranking final e determinando o(s) vencedor(es). Mostrar um ranking final.</h6>\r\n       \r\n   </div>\r\n   <Link to=\"/Endpoints\" className=\"EndpointButton\">Endpoints</Link>\r\n\r\n  </> \r\n   );\r\n}\r\n \r\nexport default About;\r\n","import './App.css';\r\nimport About from './shared/components/About';\r\nimport Endpoints from './shared/components/Endpoints';\r\nimport {HashRouter as Router, Routes, Route, Link } from 'react-router-dom'\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n  \r\n    <Router>\r\n        <Routes>\r\n          <Route path='/endpoints' element={<Endpoints />}></Route>\r\n          <Route path='/'exact element={<About />}>\r\n          </Route>\r\n        </Routes>\r\n\r\n        <Link to=\"/endpoints\"></Link>\r\n\r\n    </Router>\r\n    \r\n \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}