(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[0],[,,,,,,,,,,,,,function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},,function(e,t,r){},function(e,t){},function(e,t,r){"use strict";r.r(t);var s=r(0),n=r.n(s),a=r(8),o=r.n(a),i=(r(13),r(14),r(4)),u=(r(15),r(16),r(1)),p=function(e){var t=e.record,r=Object.keys(t);return Object(u.jsx)("tr",{children:r.map((function(e){return Object(u.jsx)("td",{children:t[e]},e)}))},t.noun)},d=function(e){var t=e.data,r=Object.keys(t[0]);return Object(u.jsxs)("table",{className:"tableContainer",children:[Object(u.jsx)("thead",{className:"TableTittle tableContainer",children:Object(u.jsx)("tr",{children:r.map((function(e){return Object(u.jsx)("th",{children:e},e)}))})}),Object(u.jsx)("tbody",{className:"textcolor tableContainer",children:t.map((function(e){return Object(u.jsx)(p,{record:e})}))})]})};r(18),r(19);var c=function(){return Object(u.jsxs)(u.Fragment,{children:[Object(u.jsx)(d,{data:[{noun:"Users",action:"Get",ursl:"/Users",businessOperation:"Get All Users",test:"\u2018test('Test #1 - Listar os utilizadores', () => {\r\n  return request(app).get(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body).not.toHaveLength(0);\r\n      expect(res.body[0]).toHaveProperty('firstName');\r\n    });\r\n});\u2019"},{noun:"Users",action:"POST",ursl:"/Users/",businessOperation:"InsertNewUser",test:"\u2018 test('Test #2 - Inserir utilizadores', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n  .set('authorization', `bearer ${user.token}`)\r\n    .send({ firstName: 'Jo\xe3o', lastName: 'Manuel', username: `${Date.now()}`, \r\n            email: `${Date.now()}@gmail.com`, password: '12345' })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.firstName).toBe('Jo\xe3o');\r\n      expect(res.body).not.toHaveProperty('password');\r\n    });\r\n});\u2019"},{noun:"Users",action:"POST",ursl:"/Users/",businessOperation:"InsertNewUser",test:"\u2018 test('Test #2.1 - Guardar a palavra passe encriptada', async () => {\r\n  const res = await request(app).post(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .send({ firstName: 'Jo\xe3o', lastName: 'Manuel', username: `${Date.now()}`, \r\n            email: `${Date.now()}@gmail.com`, password: '12345' })\r\n  expect(res.status).toBe(201);\r\n\r\n  const { id } = res.body;\r\n  const userDB = await app.services.user.findOne({ id });\r\n  expect(userDB.password).not.toBeUndefined();\r\n  expect(userDB.password).not.toBe('12345');\r\n});\u2019"},{noun:"Users",action:"POST",ursl:"/Users/",businessOperation:"InsertNewUser",test:"\u2018describe(' Test 2.2 - Valida\xe7\xe3o de criar um user', () => {\r\n  const testTemplate = (newData, errorMessage) => {\r\n    return request(app).post(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({\r\n        firstName: 'Jo\xe3o', lastName: 'Manuel', username: `${Date.now()}`, \r\n            email: `${Date.now()}@gmail.com`, password: '12345', ...newData,\r\n      })\r\n      .then((res) => {\r\n        expect(res.status).toBe(400);\r\n        expect(res.body.error).toBe(errorMessage);\r\n      });\r\n  };\r\n\r\n  test('Test 2.2.1 - Sem First Name', () => testTemplate({ firstName: null }, 'O First Name \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 2.2.2 - Sem Last Name', () => testTemplate({ lastName: null }, 'O Last Name \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 2.2.3 - Sem Email', () => testTemplate({ email: null }, 'O EMAIL \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 2.2.4 - Sem Username', () => testTemplate({ username: null }, 'O USERNAME \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 2.2.5 - Sem Password', () => testTemplate({ password: null }, 'A Password \xe9 um atributo obrigat\xf3rio'));\r\n});\u2019"},{noun:"Users",action:"GET",ursl:"/Users/:id",businessOperation:"GetSpecificUser",test:"\u2018 test('Teste #3 - Listar um user por id', () => {\r\n  return app.db('users')\r\n    .insert({ firstName: 'Jo\xe3o', lastName: 'Manuel', username: `${Date.now()}`, \r\n    email: `${Date.now()}@gmail.com`, password: '12345' }, ['id'])\r\n    .then((user) => request(app).get(`${MAIN_ROUTE}/${user[0].id}`)\r\n      .set('authorization', `bearer ${user.token}`))\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body[0].firstName).toBe('Jo\xe3o');\r\n      expect(res.body[0]).not.toHaveProperty('password');\r\n    });\r\n});\u2019"},{noun:"Users",action:"DELETE",ursl:"/Users/:id",businessOperation:"DeleteAccount",test:"\u2018test('Test #4 - Eliminar User', () => {\r\n  return app.db('user')\r\n    .insert({ firstName: 'Z\xe9', lastName: 'Manuel', username: `${Date.now()}@gmail.com`, \r\n    email: `${Date.now()}@gmail.com`, password: '12345'}, ['id'])\r\n    .then((user) => request(app).delete(`${MAIN_ROUTE}/${user[0].id}`)\r\n      .set('authorization', `bearer ${user.token}`))\r\n    .then((res) => {\r\n      expect(res.status).toBe(204);\r\n    });\r\n});\u2019"},{noun:"Users",action:"PUT",ursl:"/Users/:id",businessOperation:"Update",test:"\u2018 test('Test #5 - Alterar info de utilizador por Id', async () => {\r\n  return app.db(MAIN_ROUTE)\r\n    .insert({ firstName: 'OldName', lastName: 'Manuel', username: `${Date.now()}`, \r\n    email: `${Date.now()}@gmail.com`, password: '12345'}, ['id'])\r\n    .then((acc) => request(app).put(`${MAIN_ROUTE}/${acc[0].id}`)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ firstName: 'NewName' }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.firstName).toBe('NewName');\r\n    });\r\n});\u2019"},{noun:"Crypto",action:"GET",ursl:"/Crypto",businessOperation:"GetAllCryptos",test:"\u2018 test('Test #7 - Inserir crypto', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .send({\r\n      name: name,\r\n    })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.name).toBe(name);\r\n    });\r\n});\r\n\r\ntest('Test #7.1 - Inserir nome de Crypto duplicado', () => {\r\n  return app.db('cryptos')\r\n    .insert({ name: 'Crypto Dup' })\r\n    .then(() => request(app).post(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ name: 'Crypto Dup' }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Name duplicado na Bd');\r\n    });\r\n});\u2019"},{noun:"Crypto",action:"POST",ursl:"/Crypto/;<cryptoData>",businessOperation:"Create new Crypto",test:"\u2018 test('Test #7 - Inserir crypto', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .send({\r\n      name: name,\r\n    })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.name).toBe(name);\r\n    });\r\n});\r\n\r\ntest('Test #7.1 - Inserir nome de Crypto duplicado', () => {\r\n  return app.db('cryptos')\r\n    .insert({ name: 'Crypto Dup' })\r\n    .then(() => request(app).post(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ name: 'Crypto Dup' }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Name duplicado na Bd');\r\n    });\r\n});\u2019"},{noun:"Crypto",action:"PUT",ursl:"/Cryptos/:id/",businessOperation:"UpdateCryptoData",test:"\u2018 test('Test #7 - Inserir crypto', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .send({\r\n      name: name,\r\n    })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.name).toBe(name);\r\n    });\r\n});\r\n\r\ntest('Test #7.1 - Inserir nome de Crypto duplicado', () => {\r\n  return app.db('cryptos')\r\n    .insert({ name: 'Crypto Dup' })\r\n    .then(() => request(app).post(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ name: 'Crypto Dup' }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Name duplicado na Bd');\r\n    });\r\n});\u2019"},{noun:"Crypto",action:"DELETE",ursl:"/Cryptos/:id/",businessOperation:"RemoveCrypto",test:"\u2018 test('Test #8 - Alterar Crypto por ID', () => {\r\n  return app.db('cryptos')\r\n    .insert({ name: 'Crypto - Update'}, ['id'])\r\n    .then((crypto) => request(app).put(`${MAIN_ROUTE}/${crypto[0].id}`)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ name: 'Crypto Updated' }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.name).toBe('Crypto Updated');\r\n    });\r\n});\u2019"},{noun:"User",action:"POST",ursl:"/auth/signin",businessOperation:"Login",test:"\u2018 test('Teste #11.1 - Receber token ao autenticar', () => {\r\n  return app.services.user.save(\r\n    { firstName: 'Pedro', lastName: 'Auth', email: email, username: username, password: '12345' },\r\n  ).then(() => request(app).post('/auth/signin')\r\n    .send({ username: username, password: '12345' }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body).toHaveProperty('token');\r\n    });\r\n});\r\n\r\ntest('Teste #11.2 - Tentativa de autentica\xe7ao errada', () => {\r\n  const wrongUsername = `${Date.now()}`;\r\n  return app.services.user.save(\r\n    { firstName: 'Pedro', lastName: 'Auth', email: `${Date.now()}@ipca.pt`, username: wrongUsername, password: '12345' },\r\n    ).then(() => request(app).post('/auth/signin')\r\n    .send({ username: wrongUsername, password: '67890' }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Autentica\xe7\xe3o Inv\xe1lida!');\r\n    });\r\n});\r\n\r\ntest('Teste #11.3 - Tentativa de autentica\xe7ao com utilizador errado', () => {\r\n  const invalidUsername = `${Date.now()}`;\r\n  return request(app).post('/auth/signin')\r\n    .send({ username: invalidUsername, password: '67890' })\r\n    .then((res) => {\r\n      expect(res.status).toBe(400);\r\n      expect(res.body.error).toBe('Autentica\xe7\xe3o Inv\xe1lida! #2');\r\n    });\r\n});\r\n\r\ntest('Teste #11.4 - Aceder a rotas protegidas', () => {\r\n  return request(app).get('/v1/users')\r\n    .then((res) => {\r\n      expect(res.status).toBe(401);\r\n    });\r\n}); \u2019"},{noun:"User",action:"POST",ursl:"/auth/signup",businessOperation:"LogOut",test:"\u2018 test('Teste #12 - Criar utilizador', () => {\r\n  const newUsername = `${Date.now()}`;\r\n  return request(app).post('/auth/signup')\r\n    .send({ firstName: 'Pedro', lastName: 'Signup', email: `${Date.now()}@ipca.pt`, username: newUsername, password: '12345' })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.firstName).toBe('Pedro');\r\n      expect(res.body.lastName).toBe('Signup');\r\n      expect(res.body).toHaveProperty('email');\r\n      expect(res.body).not.toHaveProperty('password');\r\n  });\r\n});\u2019"},{noun:"Games",action:"POST",ursl:"/games",businessOperation:"CreateNewGame",test:"\u2018test('Teste #13 - Criar um novo jogo', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .send({\r\n      startDate: startDate, endDate: Date.now()\r\n    })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.startDate).toBe(startDate);\r\n    });\r\n});\u2019"},{noun:"Games",action:"GET",ursl:"/games/:id",businessOperation:"GetSpecificGame",test:"\u2018 test('Teste #14 - Listar um jogo por id', () => {\r\n  return app.db('games')\r\n    .insert({ startDate: startDate, endDate: Date.now()}, ['id'])\r\n    .then((game) => request(app).get(`${MAIN_ROUTE}/${game[0].id}`)\r\n      .set('authorization', `bearer ${user.token}`))\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.startDate).toBe(startDate);\r\n      expect(res.body).toHaveLength(1);\r\n    });\r\n});\u2019"},{noun:"Games",action:"PUT",ursl:"/games/:id/timer",businessOperation:"StartTimer",test:"\u2018 test('Teste #15 - definir o inicio-fim do jogo', () => {\r\n  const newStartDate = Date.now();\r\n  const newEndDate = Date.now();\r\n\r\n  return app.db('games')\r\n    .insert({ startDate: startDate, endDate: Date.now()}, ['id'])\r\n    .then((game) => request(app).put(`${MAIN_ROUTE}/${game[0].id}`)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ startDate: newStartDate, endDate: newEndDate }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.startDate).toBe(newStartDate);\r\n      expect(res.body.endDate).toBe(newEndDate);\r\n      expect(res.body).toHaveLength(1);\r\n    });\r\n});\u2019"},{noun:"LeaderBoard",action:"GET",ursl:"/LeaderBoards/:gameId",businessOperation:"CalculateLeaderBoardForSpecificGame",test:"\u2018 test('Teste #15 - definir o inicio-fim do jogo', () => {\r\n  const newStartDate = Date.now();\r\n  const newEndDate = Date.now();\r\n\r\n  return app.db('games')\r\n    .insert({ startDate: startDate, endDate: Date.now()}, ['id'])\r\n    .then((game) => request(app).put(`${MAIN_ROUTE}/${game[0].id}`)\r\n      .set('authorization', `bearer ${user.token}`)\r\n      .send({ startDate: newStartDate, endDate: newEndDate }))\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.startDate).toBe(newStartDate);\r\n      expect(res.body.endDate).toBe(newEndDate);\r\n      expect(res.body).toHaveLength(1);\r\n    });\r\n});\u2019"},{noun:"Wallet",action:"GET",ursl:"/GameWallet/:gameiD/:userId",businessOperation:"GetuserSpecificGameWallet",test:"test('Test #17.1 - Obter a gameWallet de um utilizador', () => {\r\n  return request(app).get(`${MAIN_ROUTE}/${testGame.id}/${user.id}`)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body).not.toHaveLength(0);\r\n      expect(res.body[0]).toHaveProperty('crypto_id');\r\n      expect(res.body[0].amount).tobe(5);\r\n      expect(res.body[0].games_users_id).tobe(testGameUser.id);\r\n    });\r\n});\r\n\r\ntest('Test #17.2 - Obter as coins de outros utilizadores', () => {\r\n  return app.db('/v1/users')\r\n    .insert({ firstName: 'Account', lastName: 'Invalid', email: `${Date.now()}@ipca.pt`, username: `${Date.now()}`, password: '12345'}, ['id'])\r\n    .then((newUser) => request(app).get(`${MAIN_ROUTE}/${testGame.id}/${newUser.id}`)\r\n      .set('authorization', `bearer ${user.token}`))\r\n    .then((res) => {\r\n      expect(res.status).toBe(403);\r\n      expect(res.body.error).toBe('N\xe3o tem acesso ao recurso solicitado');\r\n    });\r\n});\r\n\r\ntest('Teste #17.3 - Tentar um transa\xe7ao de venda sem possuir a cripto em carteira, ou em quantidade suficiente',  () => {\r\n  return app.db('gameWallet').insert(\r\n    { games_users_id: testGameAUserA, crypto_id: testCrypto.id, amount: 1 }, ['id'],\r\n  ).then((gamewallet) => request(app).put(`${MAIN_ROUTE}/${gamewallet[0].id}`)\r\n    .set('authorization', `bearer ${userA.token}`)\r\n    .send({ amount: -5 })\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.desc).toBe('Trans Updated');\r\n    }));\r\n  \r\n  const res = await app.services.gameWallet.save({ games_users_id: testGameAUserA, crypto_id: testCrypto.id, amount: 1});\r\n  testGameAUserC = { ...res3[0] };\r\n\r\n  return request(app).put(MAIN_ROUTE)\r\n  .set('authorization', `bearer ${userC.token}`)\r\n  .send({\r\n    games_users_id: testGameAUserA, crypto_id: testCrypto.id, amount: 1 \r\n  })\r\n  .then((res) => {\r\n    expect(res.status).toBe(401);\r\n    expect(res.body.error).toBe('N\xe3o tem saldo suficiente para a transa\xe7\xe3o');\r\n  });\r\n});\u2019"},{noun:"Trasaction",action:"PUT",ursl:"/GameUser/<gameid, userId>",businessOperation:"TryPurchaseWithNoCash",test:"test('Teste #18 - Tentar uma transa\xe7ao de compra sem saldo suficiente', async () => {\r\n  return app.db('games_users').insert(\r\n    {users_id: user.id, game_id: testGame.id, cashBalance: 0 }, ['id'],\r\n    ).then((game_user) => request(app).put(`${MAIN_ROUTE}/${game_user[0].id}`)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .send({ cost: cryptoCost })\r\n    .then((res) => {\r\n      expect(res.status).toBe(401);\r\n      expect(res.body.error).toBe('N\xe3o tem saldo suficiente para a transa\xe7\xe3o');\r\n    }));\r\n});"},{noun:"Trasaction",action:"GET",ursl:"/GameUser/<gameid, userId>",businessOperation:"GetUserTransactionHistory",test:"\u2018 test('Teste #19.1 - Listar todas as transa\xe7oes de utilizador', () => {\r\n  return app.db('transactions').insert([\r\n    { games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: 'B', amount: 5, crypto_value: 100 },\r\n    { games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: 'S', amount: -2, crypto_value: 100 },\r\n    { games_users_id: testGameAUserB.id, crypto_id: testCrypto.id, date: new Date(),  type: 'S', amount: -5, crypto_value: 100 },\r\n  ]).then(() => request(app).get(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${userA.token}`)\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body).toHaveLength(2);\r\n      expect(res.body[0].desc).toBe('B');\r\n      expect(res.body[0].amount).toBe(5);\r\n    }));\r\n});\r\n\r\ntest('Teste #19.2 - Aceder a transa\xe7oes de outro utilizador', () => {\r\n  return app.db('transactions').insert(\r\n    { games_users_id: testGameAUserB.id, crypto_id: testCrypto.id, date: new Date(),  type: 'B', amount: 5, crypto_value: 100 }, ['id'],\r\n  ).then((trans) => request(app).get(`${MAIN_ROUTE}/${trans[0].id}`)\r\n    .set('authorization', `bearer ${userA.token}`)\r\n    .then((res) => {\r\n      expect(res.status).toBe(403);\r\n      expect(res.body.error).toBe('N\xe3o tem acesso ao recurso solicitado');\r\n    }));\r\n});\u2019"},{noun:"Trasaction",action:"POST",ursl:"/GameUser/<gameid, userId>",businessOperation:"AddNewGameTransaction",test:"\u2018 test('Teste #20.1 - Inserir Transa\xe7\xe3o de um utilizador', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${user.token}`)\r\n    .send({\r\n      games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: 'B', amount: 5, crypto_value: 100 \r\n    })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.games_users_id).toBe(testGameAUserA.id);\r\n      expect(res.body.type).toBe('B');\r\n    });\r\n});\r\n\r\n\r\n\r\ntest('Teste #20.2 - Transa\xe7oes de compra devem ser positivas', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n  .set('authorization', `bearer ${userA.token}`)\r\n  .send({\r\n    games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: 'B', amount: 5, crypto_value: 100\r\n  })\r\n  .then((res) => {\r\n    expect(res.status).toBe(201);\r\n    expect(res.body.games_users_id).toBe(testGameAUserA.id);\r\n    expect(res.body.amount).toBe('5.00');\r\n  });\r\n});\r\ntest"},{noun:"Trasaction",action:"POST",ursl:"/GameUser/<gameid, userId>",businessOperation:"AddNewGameTransaction",test:"ntest('Teste #20.3 -Transa\xe7oes de venda devem ser negativas', () => {\r\n  return request(app).post(MAIN_ROUTE)\r\n    .set('authorization', `bearer ${userA.token}`)\r\n    .send({\r\n      games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: 'S', amount: -2, crypto_value: 100\r\n    })\r\n    .then((res) => {\r\n      expect(res.status).toBe(201);\r\n      expect(res.body.games_users_id).toBe(testGameAUserA.id);\r\n      expect(res.body.amount).toBe('-2.00');\r\n    });\r\n});\r\n\r\n//validar todos os campos\r\ndescribe(' 20.4 Valida\xe7\xe3o de criar uma transa\xe7\xe3o', () => {\r\n  const testTemplate = (newData, errorMessage) => {\r\n    return request(app).post(MAIN_ROUTE)\r\n      .set('authorization', `bearer ${userA.token}`)\r\n      .send({\r\n        games_users_id: testGameAUserC.id, crypto_id: testCrypto.id, date: new Date(),  type: 'B', amount: 5, crypto_value: 100, ...newData,\r\n      })\r\n      .then((res) => {\r\n        expect(res.status).toBe(400);\r\n        expect(res.body.error).toBe(errorMessage);\r\n      });\r\n  };\r\n\r\n"},{noun:"Trasaction",action:"POST",ursl:"/GameUser/<gameid, userId>",businessOperation:"AddNewGameTransaction",test:"test('Test 20.4.1 - Sem Game_User_ID', () => testTemplate({ games_users_id: null }, 'O GAME_USER \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 20.4.2 - Sem Crypto_ID', () => testTemplate({ crypto_id: null }, 'O Crypto_ID \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 20.4.3 - Sem Data', () => testTemplate({ date: null }, 'A DATA \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 20.4.4 - Sem Tipo', () => testTemplate({ type: null }, 'O TIPO \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 20.4.5 - Com Tipo errado', () => testTemplate({ type: 'P' }, 'O TIPO tem um valor inv\xe1lido'));\r\n "},{noun:"Trasaction",action:"POST",ursl:"/GameUser/<gameid, userId>",businessOperation:"AddNewGameTransaction",test:"test('Test 20.4.6 - Sem Amount', () => testTemplate({ amount: null }, 'O AMOUNT \xe9 um atributo obrigat\xf3rio'));\r\n  test('Test 20.4.7 - Sem o valor da crypto', () => testTemplate({ crypto_value: null }, 'O VALOR DA CRYPTO \xe9 um atributo obrigat\xf3rio'));\r\n}); \u2018"},{noun:"Trasaction",action:"GET",ursl:"/Transactions/:game/:userId/:transId",businessOperation:"GetSpecificTransaciton",test:"\u2018 test('Teste #21 - Listar uma transa\xe7ao', () => {\r\n  return app.db('transactions').insert(\r\n    { games_users_id: testGameAUserA.id, crypto_id: testCrypto.id, date: new Date(),  type: 'B', amount: 5, crypto_value: 100 }, ['id'],\r\n  ).then((trans) => request(app).get(`${MAIN_ROUTE}/${trans[0].id}`)\r\n    .set('authorization', `bearer ${userA.token}`)\r\n    .then((res) => {\r\n      expect(res.status).toBe(200);\r\n      expect(res.body.id).toBe(trans[0].id);\r\n      expect(res.body.games_users_id).toBe(testGameAUserA.id);\r\n    }));\r\n});\u2019"}]}),Object(u.jsx)(i.b,{to:"/About",className:"AboutButton",children:"About"})]})},m=function(){return Object(u.jsxs)(u.Fragment,{children:[Object(u.jsxs)("div",{className:"AboutContent",children:[Object(u.jsx)("h1",{className:"AboutTitle",children:"Cen\xe1rios Propostos:"}),Object(u.jsx)("h6",{className:"AboutText",children:"\u2022 Cria\xe7\xe3o de um Website contendo um jogo relacionado com Crypto moedas;"}),Object(u.jsx)("h6",{className:"AboutText",children:"\u2022 Desenvolver o Front-End e Backend e efetuar o deploy num servidor para ficar hosted na Web;"}),Object(u.jsx)("h6",{className:"AboutText",children:"\u2022 Obten\xe7\xe3o de data-series de um per\xedodo aleat\xf3rio (1 m\xeas de valores) de uma Base de Dados dedicada a crypto moedas para garantir um jogo justo."})]}),Object(u.jsxs)("div",{className:"AboutContent",children:[Object(u.jsx)("h1",{className:"AboutTitle",children:"Objetivos do Jogo"}),Object(u.jsx)("h6",{className:"AboutText",children:" \u2022 Cria\xe7\xe3o de um grupo de jogadores para competir entre si;"}),Object(u.jsx)("h6",{className:"AboutText",children:"\u2022 Atribui\xe7\xe3o de uma carteira inicial com fundos virtuais para transa\xe7\xf5es;"}),Object(u.jsx)("h6",{className:"AboutText",children:"\u2022 Simular um per\xedodo temporal com as respetivas oscila\xe7\xf5es dos pre\xe7os das moedas, sendo esse per\xedodo uma proxy de um per\xedodo de 1 m\xeas real comprimido em apenas 3 a 5 minutos de jogo, permitindo a compra e venda das moedas em qualquer momento do jogo;"}),Object(u.jsx)("h6",{className:"AboutText",children:"\u2022 Calcular o valor final da carteira dos jogadores, dando um ranking final e determinando o(s) vencedor(es). Mostrar um ranking final."})]}),Object(u.jsx)(i.b,{to:"/Endpoints",className:"EndpointButton",children:"Endpoints"})]})},l=r(2);var b=function(){return Object(u.jsxs)(i.a,{children:[Object(u.jsxs)(l.c,{children:[Object(u.jsx)(l.a,{path:"/endpoints",element:Object(u.jsx)(c,{})}),Object(u.jsx)(l.a,{path:"/",exact:!0,element:Object(u.jsx)(m,{})})]}),Object(u.jsx)(i.b,{to:"/endpoints"})]})},y=function(e){e&&e instanceof Function&&r.e(3).then(r.bind(null,21)).then((function(t){var r=t.getCLS,s=t.getFID,n=t.getFCP,a=t.getLCP,o=t.getTTFB;r(e),s(e),n(e),a(e),o(e)}))};o.a.render(Object(u.jsx)(n.a.StrictMode,{children:Object(u.jsx)(b,{})}),document.getElementById("root")),y()}],[[20,1,2]]]);
//# sourceMappingURL=main.f9967068.chunk.js.map